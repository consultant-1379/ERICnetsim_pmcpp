#!/bin/bash

################################################################################
# COPYRIGHT Ericsson 2017
#
# The copyright to the computer program(s) herein is the property of
# Ericsson Inc. The programs may be used and/or copied only with written
# permission from Ericsson Inc. or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the
# program(s) have been supplied.
################################################################################

###################################################
# Version no    :  NSS 17.16
# Purpose       :  Script to apply bandwidth limits to all the nodes based on the configuration in netsim_cfg
# Jira No       :  NSS-15252
# Gerrit Link   :  https://gerrit.ericsson.se/#/c/2781970/
# Description   :  Handling for multiple class for same ip address and minilink bandwidth support.
# Date          :  10/10/2017
# Last Modified :  abhishek.mandlewala@tcs.com
####################################################

#Please setup the version value for every change in git
VER="7.0"

printUsage() {

    cat <<EOF
Usage: limitbw -n|-m <oss.cfg file>      -s|-c|-r [-l "netsim server list"]

where
 -n
    Current netsim server will be selected to perform the mentioned action.

 -m <oss.cfg file>
    The cfg file to use. This is used to determine the list of
   netsim servers to perform the mentioned action.


Actions
 -c
   Config bandwidth limits.

 -s
   Show bandwidth limits.

 -r
   Remove all limits.

 -v
   Version of the script.

 -g
   Generate the BW report


EOF
}

removeTrafficControls() {
    # Clear any existing traffic controls
    /usr/sbin/tc qdisc del \
        dev ${NET_IF} \
        root > /dev/null 2>&1

    ${IPTABLES} --table mangle --flush  > /dev/null 2>&1
    ${IP6TABLES} --table mangle --flush  > /dev/null 2>&1
}

getBandWidth() {

    MY_SIM=$1
    MY_NE_TYPE=$2


    TYPE_1="RNC01 RNC02 RNC03 RNC04 RNC05"
    TYPE_2="RNC06 RNC07 RNC08 RNC09 RNC10"
    TYPE_3="RNC11 RNC12 RNC13 RNC14 RNC15"
    TYPE_4="RNC16 RNC17 RNC18 RNC19 RNC20"

    MY_SIM=`echo ${MY_SIM} | sed s/-/_/g`
    # See if there is a specific setting for this SIM
    if [ ${MY_NE_TYPE} = "RNC" ]; then

        echo ${TYPE_1} | grep -w ${MY_SIM} > /dev/null
        if [ $? -eq 0 ] ; then
            BANDWIDTH=$(eval "echo \$$(echo BANDWIDTH_${MY_NE_TYPE}_1)")
        fi

        echo ${TYPE_2} | grep -w ${MY_SIM} > /dev/null
        if [ $? -eq 0 ] ; then
            BANDWIDTH=$(eval "echo \$$(echo BANDWIDTH_${MY_NE_TYPE}_2)")
        fi

        echo ${TYPE_3} | grep -w ${MY_SIM} > /dev/null
        if [ $? -eq 0 ] ; then
            BANDWIDTH=$(eval "echo \$$(echo BANDWIDTH_${MY_NE_TYPE}_3)")
        fi

        echo ${TYPE_4} | grep -w ${MY_SIM} > /dev/null
        if [ $? -eq 0 ] ; then
            BANDWIDTH=$(eval "echo \$$(echo BANDWIDTH_${MY_NE_TYPE}_4)")
        fi

    else
        BANDWIDTH=$(eval "echo \$$(echo BANDWIDTH_${MY_NE_TYPE}_${MY_SIM})")
        if [ -z "${BANDWIDTH}" ] ; then
            # No specific setting, so get the one for the NE_TYPE
            BANDWIDTH=$(eval "echo \$$(echo BANDWIDTH_${MY_NE_TYPE})")
        fi
    fi
    
    if [[ -z "${BANDWIDTH}" ]] ; then
        echo "None"
        return
    fi

    echo ${BANDWIDTH}
    return
}

getDelay() {
    MY_SIM=$1
    MY_NE_TYPE=$2

    if [ -z ${NETWORK_DELAY} ] ; then
        echo "None"
        return
    fi

    echo ${NETWORK_DELAY}
    return
}


processNode() {
    MY_IP=$1
    MY_PARENT=$2
    MY_INDEX=$3
    MY_SIM=$4
    MY_NE_TYPE=$5

    BANDWIDTH=`getBandWidth ${MY_SIM} ${MY_NE_TYPE}`
    if [[ ${BANDWIDTH} = "None" ]]; then
        echo "ERROR: Failed to get bandwidth from cfg file for ${MY_SIM}."
        exit 1
    fi
    
    DELAY=`getDelay ${MY_SIM} ${MY_NE_TYPE}`
    if [[ ${DELAY} = "None" ]]; then
        echo "ERROR: Failed to get delay from cfg file"
        exit 1
    fi

    printf "%s %s %-15s bw=%dkbit/s delay=%dms\n" ${MY_SIM} ${MY_NE_TYPE} ${MY_IP} ${BANDWIDTH} ${DELAY}

    # Create the queue with the specified bandwidth
    CLASS_ID=1:${MY_INDEX}
    /usr/sbin/tc class add \
        dev ${NET_IF} \
        parent ${MY_PARENT} \
        classid ${CLASS_ID} \
        htb rate ${BANDWIDTH}kbit
    if [ $? -ne 0 ] ; then
        echo "ERROR: Failed to define bandwidth class for ${MY_IP}"
        exit 1
    fi

    # Create the qdisc to add the delay
    DELAY_QDISC_NUM=`expr ${MY_INDEX} + 1`
    DELAY_QDISC="${DELAY_QDISC_NUM}:"
    /usr/sbin/tc qdisc add \
        dev ${NET_IF} \
        parent ${CLASS_ID} \
        handle ${DELAY_QDISC} \
        netem delay ${DELAY}ms
    if [ $? -ne 0 ] ; then
        echo "ERROR: Failed to define delay qdisc for ${MY_IP}"
        exit 1
    fi

    # Now we need to get packets going to the IP address
    # added class for that address
    echo "${MY_IP}" | grep : > /dev/null
    if [ $? -eq 0 ] ; then
        IPTABLES_CMD=${IP6TABLES}
    else
        IPTABLES_CMD=${IPTABLES}
    fi
    ${IPTABLES_CMD} -t mangle -A POSTROUTING \
        -s ${MY_IP} \
        -j CLASSIFY --set-class ${CLASS_ID}
    if [ $? -ne 0 ] ; then
        echo "ERROR: Failed to define iptables rule for ${MY_IP}"
        exit 1
    fi
}

validate_node_ip(){
    input_ip=$1
    echo "${node_ip_list}" | grep -w "${input_ip}" > /dev/null
    if [ $? -eq 0 ]; then
        echo "False"
    else
        echo "True"
    fi
}

applyTrafficControls()
{
    # Get list of RNC IP addresses
    echo " Reading IP addresses"

    su - netsim -c "echo '.show allsimnes' | /netsim/inst/netsim_pipe"  > /tmp/nodes.txt

    # Make sure TSO is disabled
    TSO_STATUS=`${ETHTOOL} -k ${NET_IF} | egrep '^tcp segmentation offload' | awk '{print $NF}'`
    if [ "${TSO_STATUS}" = "on" ] ; then
        echo " Disabling TSO on ${NET_IF}"
        ${ETHTOOL} -K ${NET_IF} tso off
    fi

    if [ -z "${NETWORK_DELAY}" ] ; then
        echo "ERROR: NETWORK_DELAY not set in cfg"
        exit 1
    fi

    /usr/sbin/tc qdisc add \
        dev ${NET_IF} \
        handle 1: \
        root \
        htb default 0
    if [ $? -ne 0 ] ; then
        echo "ERROR: Failed to create root htb qdisc"
        exit 1
    fi

    # Create default class with full bandwidth of NIC
    NIC_BANDWIDTH=`${ETHTOOL} ${NET_IF} | awk '{if ($1 == "Speed:") print $2}' | sed 's|Mb/s||'`
    /usr/sbin/tc class add \
        dev ${NET_IF} \
        parent 1: \
        classid 1:0 \
        htb rate ${NIC_BANDWIDTH}mbit

    MY_PARENT=1:0
    INDEX=0
    for RNC in $LIST ; do
        echo "${RNC}" | egrep -w 'RNC01|RNC02|RNC03|RNC04|RNC05|RNC06|RNC07|RNC08|RNC09|RNC10|RNC11|RNC12|RNC13|RNC14|RNC15|RNC16|RNC17|RNC18|RNC19|RNC20' > /dev/null
        if [ $? -eq 0 ] ; then
            INDEX=`expr ${INDEX} + 1`

            # Not LTE so assume WRAN (No RNC in LTE) ignore DSC, SAPC, TCU, CSCF, MTAS, SBG, WCG, RNNODE, VPP, VTFRADIONODE, 5GRADIONODE, VRC, VBGF, IPWORKS, C608, MRF, UPG, WMG, EME, VRM
            RNC_IP=`grep -w ${RNC} /tmp/nodes.txt | awk '{print $1" "$2}' | grep -w ${RNC} | cut -d" " -f2`
            if [ -z "${RNC_IP}" ] ; then
                echo "ERROR: No IP address found for ${RNC}"
                exit 1
            fi
            processNode ${RNC_IP} ${MY_PARENT} ${INDEX} ${RNC} RNC
        fi
    done

   MINILINK_SIM_LIST=`ls /netsim/netsimdir/ | grep 'ML' | grep 'CORE' | grep -v .zip | tr '\n' ' ' | sed 's/.$//'`

   if [ $? -eq 0 ]; then
       LIST="${LIST} ${MINILINK_SIM_LIST}"
   fi

   for SIM in $LIST ; do

       NODE_B_TYPE="RBS"
       echo ${SIM} | grep LTE > /dev/null
       if [ $? -eq 0 ] ; then
           # LTE nodes
           NODE_B_TYPE="ERBS"
       fi

       if [ "${TYPE}" = "NSS" ]; then
           # Get only RBS
           RBS_IP_LIST=`grep ${SIM} /tmp/nodes.txt | awk '{print $1" "$2}' | grep RBS | grep -v ERBS |  grep -v PRBS | grep -v pERBS | grep -v dg2ERBS | grep -v MSRBS-V2 | cut -d" " -f2`
       else
           # Get only RBS and ERBS only. ignore PRBS, MSRBS_V1 and MSRBS_V2
           RBS_IP_LIST=`grep ${SIM} /tmp/nodes.txt | awk '{print $1" "$2}' | grep RBS | grep -v PRBS | grep -v pERBS | grep -v dg2ERBS | grep -v MSRBS-V2 | cut -d" " -f2`
       fi
       for RBS_IP in ${RBS_IP_LIST} ; do
           check=`validate_node_ip "${RBS_IP}"`
           if [[ "${check}" = "True" ]]; then
               INDEX=`expr ${INDEX} + 1`
               processNode ${RBS_IP} ${MY_PARENT} ${INDEX} ${SIM} ${NODE_B_TYPE}
               node_ip_list="${node_ip_list} ${RBS_IP}"
           fi
       done

           # For BSC SIM
           echo "${SIM}" | grep 'BSC' > /dev/null
           if [ $? -eq 0 ] ; then
               INDEX=`expr ${INDEX} + 1`
                # BSC Nodes
                BSC_IP_LIST=`egrep 'BSC' /tmp/nodes.txt | awk '{print $2}' | cut -d ',' -f1`
                for BSC_IP in ${BSC_IP_LIST} ; do
                    check=`validate_node_ip "${BSC_IP}"`
                    if [[ "${check}" = "True" ]]; then
                        INDEX=`expr ${INDEX} + 1`
                        processNode ${BSC_IP} ${MY_PARENT} ${INDEX} ${SIM} BSC
                        node_ip_list="${node_ip_list} ${BSC_IP}"
                    fi
                done
            fi


       #Support for LTE and WRAN MSRBS_V2 nodes
       if [ "${TYPE}" = "NSS" ]; then
           MSRBS_IP_LIST=`grep ${SIM} /tmp/nodes.txt | grep 'MSRBS-V2' | grep -v 'dg2ERBS' | awk '{print $2}'`
       else
           MSRBS_IP_LIST=`grep ${SIM} /tmp/nodes.txt | egrep 'dg2ERBS|MSRBS-V2' | awk '{print $2}'`
       fi

       for MRBS_IP in ${MSRBS_IP_LIST} ; do
           check=`validate_node_ip "${MRBS_IP}"`
           if [[ "${check}" = "True" ]]; then
               INDEX=`expr ${INDEX} + 1`
               processNode ${MRBS_IP} ${MY_PARENT} ${INDEX} ${SIM} MSRBS_V2
               node_ip_list="${node_ip_list} ${MRBS_IP}"
           fi
       done

       if [ "${TYPE}" != "NSS" ]; then

           # For PRBS of RNC
           PRBS_IP_LIST=`grep ${SIM} /tmp/nodes.txt | grep PRBS | awk '{print $2}'`
           for PRBS_IP in ${PRBS_IP_LIST} ; do
               check=`validate_node_ip "${PRBS_IP}"`
               if [[ "${check}" = "True" ]]; then
                   INDEX=`expr ${INDEX} + 1`
                   processNode ${PRBS_IP} ${MY_PARENT} ${INDEX} ${SIM} PRBS
                   node_ip_list="${node_ip_list} ${PRBS_IP}"
               fi
           done

           #Support for MSRBS_V1 nodes of LTE
           MSRBS_IP_LIST=`grep ${SIM} /tmp/nodes.txt | grep pERBS | awk '{print $2}'`
           for MRBS_IP in ${MSRBS_IP_LIST} ; do
               check=`validate_node_ip "${MRBS_IP}"`
               if [[ "${check}" = "True" ]]; then
                   INDEX=`expr ${INDEX} + 1`
                   processNode ${MRBS_IP} ${MY_PARENT} ${INDEX} ${SIM} MSRBS_V1
                   node_ip_list="${node_ip_list} ${MRBS_IP}"
               fi
           done

           # For SPITFIRE SIM
           echo "${SIM}" | grep 'SpitFire' > /dev/null
           if [ $? -eq 0 ] ; then
               INDEX=`expr ${INDEX} + 1`
               # SPITFIRE Nodes
               SPITFIRE_IP_LIST=`grep SPFR /tmp/nodes.txt | awk '{print $2}'`
               for SPITFIRE_IP in ${SPITFIRE_IP_LIST} ; do
                   check=`validate_node_ip "${SPITFIRE_IP}"`
                   if [[ "${check}" = "True" ]]; then
                       INDEX=`expr ${INDEX} + 1`
                       processNode ${SPITFIRE_IP} ${MY_PARENT} ${INDEX} ${SIM} SPITFIRE
                       node_ip_list="${node_ip_list} ${SPITFIRE_IP}"
                   fi
               done
           fi

           # For MGw SIM
           echo "${SIM}" | grep 'MGw' > /dev/null
           if [ $? -eq 0 ] ; then
               INDEX=`expr ${INDEX} + 1`
                # MGw Nodes
                MGw_IP_LIST=`egrep 'MGw|K3C' /tmp/nodes.txt | awk '{print $2}'`
                for MGw_IP in ${MGw_IP_LIST} ; do
                    check=`validate_node_ip "${MGw_IP}"`
                    if [[ "${check}" = "True" ]]; then
                        INDEX=`expr ${INDEX} + 1`
                        processNode ${MGw_IP} ${MY_PARENT} ${INDEX} ${SIM} MGW
                        node_ip_list="${node_ip_list} ${MGw_IP}"
                    fi
                done
            fi

            # For Minilink SIM
            echo "${SIM}" | grep 'ML' > /dev/null
            if [ $? -eq 0 ] ; then
                ML_IP_LIST=`grep ML /tmp/nodes.txt | awk '{print $2}'`
                for ML_IP in ${ML_IP_LIST} ; do
                    check=`validate_node_ip "${ML_IP}"`
                    if [[ "${check}" = "True" ]]; then
                        INDEX=`expr ${INDEX} + 1`
                        processNode ${ML_IP} ${MY_PARENT} ${INDEX} ML ML
                        node_ip_list="${node_ip_list} ${ML_IP}"
                    fi
                done
            fi
        fi

    done

}

showScriptVersion()
{

  echo "Script Version: "${VER}

}

#This method genertes the netsim traffic contol report based on the started nodes.
generateTrafficControlsReport()
{
    ${IPTABLES} --table mangle --list --numeric > /tmp/iptables.txt 2>&1
    ${IP6TABLES} --table mangle --list --numeric > /tmp/iptables6.txt 2>&1

    # su - netsim -c "echo '.show allsimnes' | /netsim/inst/netsim_pipe" | egrep '^ *RNC|^ *LTE|^ *DSC|^ *STN'  > /tmp/nodeDetails.txt
    su - netsim -c "echo '.show started' | /netsim/inst/netsim_pipe" > /tmp/nodeDetails.txt
    # Fetch and store the delay
   /usr/sbin/tc qdisc show dev ${NET_IF} > /tmp/node_delay.txt
    # Fetch and store the bandwidth
   /usr/sbin/tc class show dev ${NET_IF} > /tmp/node_bw.txt

   NF=`head -1 /tmp/node_bw.txt  | awk '{print NF}'`
    # Remove the file present
    if [ -f "/tmp/netsim_tc_report.txt" ]
    then
      rm -rf "/tmp/netsim_tc_report.txt"
    fi

    while read line
    do
        echo $line | grep "server_" > /dev/null
        if [ $? -eq 0 ]
        then
            NETYPE=`echo $line |awk -F"," '{print $1}' | awk '{print $(NF-1) }'`
        fi

        echo $line | grep "/netsim/netsimdir" > /dev/null
        if [ $? -eq 0 ]
        then
           NEINFO=`echo $line | sed 's|/netsim/netsimdir/||g'`
           NENAME=`echo $NEINFO | awk '{print $1}'`
           NEIP=`echo $NEINFO | awk '{print $2}'`
           CLASS=`cat /tmp/iptables.txt | awk -v MATCH="$NEIP" '{if ($4 == MATCH) print $NF}'`
            if [ -z "${CLASS}" ] ; then
                CLASS=`cat /tmp/iptables6.txt | sed 's|/[0-9]*||' | awk -v MATCH="$NEIP" '{if ($3 == MATCH) print $NF}'`
            fi


           SIM=`echo $NEINFO | awk '{print $NF}'`

           if [ $NF -ne 16 ] ; then
               BANDWIDTH=`cat /tmp/node_bw.txt | awk -v MATCH="$CLASS" '{if ($3== MATCH) print $11}'`
           else
               BANDWIDTH=`cat /tmp/node_bw.txt | awk -v MATCH="$CLASS" '{if ($3== MATCH) print $10}'`
           fi

           if [ -z "$BANDWIDTH" ]
           then
               BANDWIDTH="NA"
           fi
           DELAY=`cat /tmp/node_delay.txt | awk -v MATCH="$CLASS" '{if ($5== MATCH) print $9}'`
           if [ -z "$DELAY" ]
           then
               DELAY="NA"
           fi

         #echo "$NETYPE $BANDWIDTH $DELAY $SIM $NENAME $NEIP $CLASS "
          echo "$NETYPE $BANDWIDTH $DELAY $SIM" >> /tmp/netsim_tc_report.txt

      fi

    done < /tmp/nodeDetails.txt

    DDCPATH="/var/tmp/ddc_data/"
    DDCDIR=`date "+%d%m%y"`
    DDCFILENAME="netsim_nodes_perfstats.txt"
    if [ -d "$DDCPATH$DDCDIR" ]
    then
      DDCFILE="$DDCPATH$DDCDIR/$DDCFILENAME"
      echo "Netsim traffic control report will be written in the file $DDCFILE"
    else
      DDCFILE="/tmp/$DDCFILENAME"
       echo "$DDCPATH$DDCDIR does not exist. Netsim traffic control report will be written in the file $DDCFILE"
    fi


    NETSIM=`hostname`

    printf "%-10s %-10s %-10s %-20s %-40s %-10s %s\n" "Type" "Bandwidth" "Latency" "No. of Nodes" "Simulation" "Netsim Server" > $DDCFILE
    while read line
    do
      COUNT=`echo $line | awk '{print $1}'`
      TYPE=`echo $line | awk '{print $2}'`
      BW=`echo $line | awk '{print $3}'`
      LATENCY=`echo $line | awk '{print $4}'`
      SIM=`echo $line | awk '{print $5}'`
      printf "%-10s %-10s %-10s %-20s %-40s %-10s %s\n" ${TYPE} ${BW} ${LATENCY} ${COUNT} ${SIM} ${NETSIM} >> $DDCFILE

    done < <(cat /tmp/netsim_tc_report.txt | sort | uniq -c)

  # /limitbw_new -n -s | awk '{print $2, $4, $5}' | sort | uniq -c

}

showTrafficControls()
{
    ${IPTABLES} --table mangle --list --numeric > /tmp/iptables.txt 2>&1
    ${IP6TABLES} --table mangle --list --numeric > /tmp/iptables6.txt 2>&1

    su - netsim -c "echo '.show allsimnes' | /netsim/inst/netsim_pipe" | sort > /tmp/nodes.txt
    /usr/sbin/tc qdisc show dev ${NET_IF} > /tmp/node_delay.txt

   # Fetch and store the bandwidth
   /usr/sbin/tc class show dev ${NET_IF} | sort -n -k 7 > /tmp/node_bw.txt

    NF=`head -1 /tmp/node_bw.txt  | awk '{print NF}'`
    printf "%-20s %-10s %-10s %-15s %s\n" "NODE" "BANDWIDTH" "DELAY" "IPADDRESS" "NET_IF"
    while read line; do
        CLASS=`echo ${line} | awk '{print $3}'`
        if [ "${CLASS}" != "1:" ] ; then

            if [ $NF -ne 16 ] ; then
                BANDWIDTH=`echo ${line} | awk '{print $11}'`
            else
                BANDWIDTH=`echo ${line} | awk '{print $10}'`
            fi
            IPADDRESS=`cat /tmp/iptables.txt | awk -v MATCH="$CLASS" '{if ($NF == MATCH) print $4}'`
            if [ -z "${IPADDRESS}" ] ; then
                IPADDRESS=`cat /tmp/iptables6.txt | awk -v MATCH="$CLASS" '{if ($NF == MATCH) print $3}' | sed 's|/.*$||'`
            fi

            DELAY=`cat /tmp/node_delay.txt | awk -v MATCH="$CLASS" '{if ($5== MATCH) print $9}'`

            if [ ! -z "${IPADDRESS}" ] ; then
                NODE=`cat /tmp/nodes.txt | awk -v IP=$IPADDRESS '{if ($2 == IP) print $1}'`
                printf "%-20s %-10s %-10s %-15s %s\n" ${NODE} ${BANDWIDTH} ${DELAY} ${IPADDRESS} ${NET_IF}

            fi

        fi
    done < /tmp/node_bw.txt

#./limitbw_new -n -s | awk '{print $2, $4, $5}' | sort | uniq -c

}

NETSIM=0
OP=""

while getopts  "m:l:vgcsrn" flag
do
    case "$flag" in
        m) OSS_MASTER_CFG="$OPTARG";;
        n) NETSIM=1;;
        s) OP="-s";;
        c) OP="-c";;
        r) OP="-r";;
        v) OP="-ver";;
        g) OP="-report";;
        l) SERVERS="$OPTARG";;
        *) printUsage
            exit 1;;
    esac
done

if [ ${NETSIM} -eq 0 ] ; then
    if [ -z "${OSS_MASTER_CFG}" ] && [ -z "${SERVERS}" ]; then
        printUsage
        exit
    fi
fi

if [ -z "${OP}" ]  ; then
    echo "ERROR: No operation specified, you must use one of -s,-c or -r"
    printUsage
    exit
fi

node_ip_list=""

if [ ${NETSIM} -eq 0 ] ; then
    if [ -z "${SERVERS}" ] ; then
        . ${OSS_MASTER_CFG} > /dev/null 2>&1
    fi

    ARGS="${OP}"

    for SERVER in ${SERVERS} ; do
        echo "${SERVER}"

        if [ "${OP}" = "-s" ] ; then
            rsh -l root ${SERVER} "/netsim_users/pms/bin/limitbw -n ${ARGS}"
        else
            LOG=/netsim_users/pms/logs/limitbw.log
            rsh -l root ${SERVER} "/netsim_users/pms/bin/limitbw -n ${ARGS} >  ${LOG} 2>&1"
            rsh -l root ${SERVER} "tail --lines=100 ${LOG}" | grep ERROR > /dev/null
            if [ $? -eq 0 ] ; then
                echo "ERROR: Failed for ${SERVER}"
                rsh -l root ${SERVER} "tail --lines=100 ${LOG}" | grep ERROR
                exit 1
            fi
        fi
    done
else
    . /netsim/netsim_cfg > /dev/null 2>&1

    if [ -r /usr/sbin/ethtool ] ; then
        ETHTOOL=/usr/sbin/ethtool
    elif [ -r /sbin/ethtool ] ; then
        ETHTOOL=/sbin/ethtool
    else
        echo "ERROR: Cannot file ethtool"
        exit 1
    fi

    IPTABLES=/usr/sbin/iptables
    IP6TABLES=/usr/sbin/ip6tables

    # Need to figure out which interface to use,
    # interface used for default destination
    NET_IF=`/sbin/route  | egrep "^default" | awk '{ print $NF }'`

    # IPv6 doesn't show :x nics
    if [ -z "${NET_IF}" ] ; then
        NET_IF="eth0"
    fi


    if [ ${OP} = "-s" ] ; then
        showTrafficControls
    elif [ ${OP} = "-c" ] ; then
        removeTrafficControls
        applyTrafficControls
    elif [ ${OP} = "-r" ] ; then
        removeTrafficControls
    elif [ ${OP} = "-ver" ] ; then
        showScriptVersion
    elif [ ${OP} = "-report" ] ; then
        generateTrafficControlsReport
    fi


fi

