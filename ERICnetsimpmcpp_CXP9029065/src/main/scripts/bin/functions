################################################################################
# COPYRIGHT Ericsson 2017
#
# The copyright to the computer program(s) herein is the property of
# Ericsson Inc. The programs may be used and/or copied only with written
# permission from Ericsson Inc. or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the
# program(s) have been supplied.
################################################################################

###################################################
# Version no    :  NSS 18.04
# Purpose       :  A placeholder for all the common functions used across Genstats scripts
# Jira No       :  NSS-16457
# Gerrit Link   :
# Description   :  Handling for Router 6672 sim name.
# Date          :  18/01/2018
# Last Modified :  abhishek.mandlewala@tcs.com
####################################################

getRncType() {

    MY_RNC=$1
    MY_SERVER=$2

    MY_TYPE="C"

    RNC_TYPE=$(eval "echo \$$(echo ${MY_RNC}_type)")
    if [ ! -z "${RNC_TYPE}" ] ; then
        MY_TYPE=${RNC_TYPE}
    elif [ ! -z "${RNC_TYPE_RANGE_LIST}" ] ; then
        RNC_NUM=`echo ${MY_RNC} | sed 's/^RNC//'`
        for RNC_TYPE_RANGE in ${RNC_TYPE_RANGE_LIST} ; do
            RNC_TYPE=`echo ${RNC_TYPE_RANGE} | awk -F: '{print $1}'`
            RNC_MIN=`echo ${RNC_TYPE_RANGE} | awk -F: '{print $2}'`
            RNC_MAX=`echo ${RNC_TYPE_RANGE} | awk -F: '{print $3}'`
            if [ ${RNC_NUM} -ge ${RNC_MIN} ] && [ ${RNC_NUM} -le ${RNC_MAX} ] ; then
                MY_TYPE=${RNC_TYPE}
                break
            fi
       done
    fi

    echo "${MY_TYPE}"
}

getSimNVer() {

    MY_SIM=$1
    MY_N_VER="N"

    MY_SIM_N_VER=$(eval "echo \$$(echo ${MY_SIM}_mimtype)")
    if [ ! -z "${MY_SIM_N_VER}" ] ; then
        MY_N_VER=${MY_SIM_N_VER}
    fi

    echo "${MY_N_VER}"
}

getSimType() {

    MY_SIM=$1

    TYPE="UNKNOWN"
    echo ${MY_SIM} | grep -v TD | grep RNC > /dev/null
    if [ $? -eq 0 ] ; then
        echo "WRAN"
        return
    fi

    echo ${MY_SIM} | grep RNNODE > /dev/null
    if [ $? -eq 0 ] ; then
        echo "RNNODE"
        return
    fi

    echo ${MY_SIM} | egrep 'VPP|vPP' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "VPP"
        return
    fi
   
    echo ${MY_SIM} | egrep 'VRM|vRM' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "VRM"
        return
    fi


    echo ${MY_SIM} | egrep 'VRC|vRC' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "VRC"
        return
    fi

    echo ${MY_SIM} | grep VTFRadioNode > /dev/null
    if [ $? -eq 0 ] ; then
        echo "VTFRADIONODE"
        return
    fi

    echo ${MY_SIM} | grep 5GRadioNode > /dev/null
    if [ $? -eq 0 ] ; then
        echo "5GRADIONODE"
        return
    fi

    echo ${MY_SIM} | grep LTE > /dev/null
    if [ $? -eq 0 ] ; then
        echo "LTE"
        return
    fi

    echo ${MY_SIM} | grep TD > /dev/null
    if [ $? -eq 0 ] ; then
        echo "TD"
        return
    fi

    echo ${MY_SIM} | grep MGw > /dev/null
    if [ $? -eq 0 ] ; then
        echo "MGW"
        return
    fi

    echo ${MY_SIM} | grep SpitFire > /dev/null
    if [ $? -eq 0 ] ; then
        echo "SPITFIRE"
        return
    fi

    echo ${MY_SIM} | grep R6274 > /dev/null
    if [ $? -eq 0 ] ; then
        echo "R6274"
        return
    fi

    echo ${MY_SIM} | egrep 'R6672|Router6672' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "R6672"
        return
    fi

    echo ${MY_SIM} | egrep 'R6675|Router6675' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "R6675"
        return
    fi

    echo ${MY_SIM} | egrep 'R6371|Router6371' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "R6371"
        return
    fi

    echo ${MY_SIM} | egrep 'R6471-1|Router6471-1' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "R6471-1"
        return
    fi

    echo ${MY_SIM} | egrep 'R6471-2|Router6471-2' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "R6471-2"
        return
    fi

    echo ${MY_SIM} | grep DSC > /dev/null
    if [ $? -eq 0 ] ; then
        echo "DSC"
        return
    fi

    echo ${MY_SIM} | grep ESAPC > /dev/null
    if [ $? -eq 0 ] ; then
        echo "ESAPC"
        return
    fi

    echo ${MY_SIM} | grep TCU03 > /dev/null
    if [ $? -eq 0 ] ; then
        echo "TCU03"
        return
    fi

    echo ${MY_SIM} | grep TCU04 > /dev/null
    if [ $? -eq 0 ] ; then
        echo "TCU04"
        return
    fi

    # DOG stands for GSM DG2 SIMS
    echo ${MY_SIM} | grep DOG > /dev/null
    if [ $? -eq 0 ] ; then
        echo "GSM_DG2"
        return
    fi

    echo ${MY_SIM} | grep CSCF > /dev/null
    if [ $? -eq 0 ] ; then
        echo "CSCF"
        return
    fi

    echo ${MY_SIM} | grep MTAS > /dev/null
    if [ $? -eq 0 ] ; then
        echo "MTAS"
        return
    fi

    echo ${MY_SIM} | grep SBG > /dev/null
    if [ $? -eq 0 ] ; then
        echo "SBG"
        return
    fi

    echo ${MY_SIM} | grep WCG > /dev/null
    if [ $? -eq 0 ] ; then
        echo "WCG"
        return
    fi

    echo ${MY_SIM} | grep EPG-SSR > /dev/null
    if [ $? -eq 0 ] ; then
        echo "EPG-SSR"
        return
    fi

    echo ${MY_SIM} | grep EPG-EVR > /dev/null
    if [ $? -eq 0 ] ; then
        echo "EPG-EVR"
        return
    fi

    echo ${MY_SIM} | grep HSS > /dev/null
    if [ $? -eq 0 ] ; then
        echo "HSS"
        return
    fi

    echo ${MY_SIM} | grep vBGF > /dev/null
    if [ $? -eq 0 ] ; then
        echo "VBGF"
        return
    fi

    echo ${MY_SIM} | grep IPWORKS > /dev/null
    if [ $? -eq 0 ] ; then
        echo "IPWORKS"
        return
    fi

    echo ${MY_SIM} | grep C608 > /dev/null
    if [ $? -eq 0 ] ; then
        echo "C608"
        return
    fi

    echo ${MY_SIM} | grep MRF > /dev/null
    if [ $? -eq 0 ] ; then
        echo "MRF"
        return
    fi

    echo ${MY_SIM} | grep UPG- > /dev/null
    if [ $? -eq 0 ] ; then
        echo "UPG"
        return
    fi

    echo ${MY_SIM} | grep WMG > /dev/null
    if [ $? -eq 0 ] ; then
        echo "WMG"
        return
    fi

    echo ${MY_SIM} | grep EME > /dev/null
    if [ $? -eq 0 ] ; then
        echo "EME"
        return
    fi

    echo ${MY_SIM} | grep RBS > /dev/null
    if [ $? -eq 0 ] ; then
        echo "RBS"
        return
    fi

    echo ${MY_SIM} | grep BSC > /dev/null
    if [ $? -eq 0 ] ; then
        echo "BSC"
        return
    fi

    echo ${MY_SIM} | grep MSC > /dev/null
    if [ $? -eq 0 ] ; then
        echo "MSC"
        return
    fi
    echo "UNKNOWN"
    return
}

getRncRelease() {

    MY_MIM_VER=$1
    MY_RNC_P_VER=$(eval "echo \$$(echo ${MY_MIM_VER}_RNC_P_VER)")

    if [ -z "${MY_RNC_P_VER}" ] ; then
        echo "ERROR: ${MY_MIM_VER}_RNC_P_VER is not defined" 1>&2
        exit 1
    fi

    echo "${MY_RNC_P_VER}"
}

getGpeh2Xml() {

    MY_MIM_VER=$1
    MY_RNC_P_VER=`getRncRelease ${MY_MIM_VER}`
    if [ $? -ne 0 ] ; then
        exit 1
    fi

    echo "/opt/ericsson/eba_rnctools/bin/gpeh2xml-${MY_RNC_P_VER}"
}

getXml2Gpeh() {

    MY_MIM_VER=$1

    MY_RNC_P_VER=`getRncRelease ${MY_MIM_VER}`
    if [ $? -ne 0 ] ; then
        exit 1
    fi
    echo "/opt/ericsson/eba_rnctools/bin/xml2gpeh-${MY_RNC_P_VER}"
}

getSimListForServer() {

    SERVER=$1
    SERVER_NAME=`echo $SERVER | sed s/-/_/g`
    THE_LIST=`eval echo \\$${SERVER_NAME}_list`
    echo ${THE_LIST}
}


getMMESimListForServer() {

    SERVER=$1
    SERVER_NAME=`echo $SERVER | sed s/-/_/g`
    THE_LIST=`eval echo \\$${SERVER_NAME}_mme_list`
    echo ${THE_LIST}
}



log() {

    MSG=$1

    TS=`date +"%Y-%m-%d %H:%M:%S"`
    echo "${TS} ${MSG}"
}


getRemoteNeMIM() {

    local SERVER=$1
    local SIM=$2
    local NE_TYPE=$3
    local IS_GRAN_SIM=$4

    if [ "${IS_GRAN_SIM}" != "YES" ] ; then
        IS_GRAN_SIM="NO"
    fi

    MIM_VER=$(rsh -l netsim ${SERVER} /netsim_users/pms/bin/get_mim_ver --sim ${SIM} --netype ${NE_TYPE} --isgransim ${IS_GRAN_SIM})
    if [ $? -ne 0 ] ; then
        echo "ERROR: Failed to get MIM ver for ${NE_TYPE} in ${SIM} on ${SERVER}, rsh error"
        return 1
    fi

    echo "${MIM_VER}" | egrep '^ERROR:' > /dev/null
    if [ $? -eq 0 ] ; then
        echo "ERROR: Failed to get MIM ver for ${NE_TYPE} in ${SIM} on ${SERVER}, get_mim_ver error"
        return 1
    fi

    echo "${MIM_VER}"
}

getMPConfig() {

    MY_RNC=$1

    if [ -z "${GPEH_MP_CONFIG_LIST}" ] ; then
        echo "GPEH_MP_CONFIG_LIST not set"
        return 1
    fi

    MY_CONFIG=""
    RNC_NUM=`echo ${MY_RNC} | sed 's/^RNC//'`
    for RNC_MP_CONFIG in ${GPEH_MP_CONFIG_LIST} ; do
        RNC_MIN=`echo ${RNC_MP_CONFIG} | awk -F: '{print $1}'`
        RNC_MAX=`echo ${RNC_MP_CONFIG} | awk -F: '{print $2}'`
        CFG=`echo ${RNC_MP_CONFIG} | awk -F: '{print $3}'`
        if [ ${RNC_NUM} -ge ${RNC_MIN} ] && [ ${RNC_NUM} -le ${RNC_MAX} ] ; then
            MY_CONFIG=${CFG}
            break
        fi
    done

    if [ -z "${MY_CONFIG}" ] ; then
        return 1
    fi

    echo "${MY_CONFIG}"
    return 0
}




getGpehCellsPerMP() {

    MY_RNC=$1

    if [ -z "${GPEH_CELLS_PER_MP_CONFIG_LIST}" ] ; then
        echo "GPEH_CELLS_PER_MP_CONFIG_LIST not set"
        return 1
    fi

    MY_CELL_PER_MP=""
    RNC_NUM=`echo ${MY_RNC} | sed 's/^RNC//'`
    for GPEH_CELLS_CONFIG in ${GPEH_CELLS_PER_MP_CONFIG_LIST} ; do
        RNC_MIN=`echo ${GPEH_CELLS_CONFIG} | awk -F: '{print $1}'`
        RNC_MAX=`echo ${GPEH_CELLS_CONFIG} | awk -F: '{print $2}'`
        CELL_PER_MP=`echo ${GPEH_CELLS_CONFIG} | awk -F: '{print $3}'`
        if [ ${RNC_NUM} -ge ${RNC_MIN} ] && [ ${RNC_NUM} -le ${RNC_MAX} ] ; then
            MY_CELL_PER_MP=${CELL_PER_MP}
            break
        fi
    done

    if [ -z "${MY_CELL_PER_MP}" ] ; then
        return 1
    fi

    echo "${MY_CELL_PER_MP}"
    return 0

}


getNumSubFiles() {

    local RNC=$1
    local NUM_CELLS=$2

    #Get the GPEH Cells per MP for the given RNC
    MY_GPEH_CELLS_PER_MP=$(getGpehCellsPerMP ${RNC})
    if [ $? -ne 0 ] ; then
        echo "${MY_GPEH_CELLS_PER_MP}"
        return 1
    fi

    # Note
    local MP_CONFIG
    MP_CONFIG=$(getMPConfig ${RNC})
    if [ $? -ne 0 ] ; then
        echo "${MP_CONFIG}"
        return 1
    fi

    local MAX_SUB_FILES=`echo ${MP_CONFIG} | awk -F, '{print $1}'`
    local MP_PER_FILE=`echo ${MP_CONFIG} | awk -F, '{print $2}'`

    local NUM_MPs=`expr ${NUM_CELLS} / ${MY_GPEH_CELLS_PER_MP}`
    local NUM_SUB_FILES=`expr ${NUM_MPs} / ${MP_PER_FILE}`
    if [ ${NUM_SUB_FILES} -gt ${MAX_SUB_FILES} ] ; then
        NUM_SUB_FILES=${MAX_SUB_FILES}
    fi

    echo ${NUM_SUB_FILES}
}


checkPMDIR() {

    if [ -z "${PMDIR}" ] ; then
        log "ERROR: PMDIR not set"
        return 1
    fi

    # If it's a simple path
    if [ -d "${PMDIR}" ] ; then
        return 0
    fi

    # Okay doesn't exist, now maybe its an NFS reference
    echo "${PMDIR}" | egrep '^[^ :]*:/.*' > /dev/null
    if [ $? -ne 0 ] ; then
        # Not NFS so the referenced dir doesnt exist
        return 1
    fi

    #
    # NFS reference
    #
    HOST=$(echo ${PMDIR} | awk -F: '{print $1}')
    DIR=$(echo ${PMDIR} | awk -F: '{print $2}')

    PMDIR=$(printf "/net/%s%s" ${HOST} ${DIR})
    # Check that it exists
    if [ ! -d ${PMDIR} ] ; then
        return 1
    fi
    return 0

    # THIS_HOST_OS=$(uname)
    # if [ ${THIS_HOST_OS} = "SunOS" ] ; then
    # else
    # 	# No automout
    # 	PMDIR=/tmp/pmdir_mnt
    # 	# Check if already mounted
    # 	if [ -d ${PMDIR}/xml_templates ] ; then
    # 	    return 0
    # 	fi

    # 	# Try and mount
    # 	if [ ! -d ${PMDIR} ] ; then
    # 	    mkdir ${PMDIR}
    # 	fi

    # 	mount ${HOST}:${DIR} ${PMDIR}
    # 	if [ $? -ne 0 ] ; then
    # 	    return 1
    # 	fi
    # fi
}




#Get ROP Intervals supported for a NE Type
getStatsRopIntervalSupportedForNodeType() {

    NE_TYPE=$1
    ROP_PERIOD_LIST=""
    for STATS_WORKLOAD in $STATS_WORKLOAD_LIST; do
         ROP_PERIOD=`echo ${STATS_WORKLOAD} | awk -F: '{print $1}'`
         NE_TYPES=`echo ${STATS_WORKLOAD} | awk -F: '{print $2}'`
         if [ ${NE_TYPES} = "ALL" ] ; then

             ROP_PERIOD_LIST="${ROP_PERIOD_LIST} ${ROP_PERIOD}"
         else
             NE_TYPES=$(echo $NE_TYPES | sed 's/,/ /g')
             echo ${NE_TYPES} | grep -w -i ${NE_TYPE} > /dev/null
             if [ $? -eq 0 ] ; then
                  ROP_PERIOD_LIST="${ROP_PERIOD_LIST} ${ROP_PERIOD}"
             fi
         fi
    done
    echo "${ROP_PERIOD_LIST}"
}

# Create Links for OSS Simulator
linkFiles(){
    source=$1
	target=$2
    ln -s $source $target &
    rc=$?
    if [ $rc -ne 0 ] ; then
        if [ $rc -eq 2 ] ; then
            echo "INFO: File exists: $target"
        else
            echo "ERROR: Failed to link $target"
        fi
    fi
}
